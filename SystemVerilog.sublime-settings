{
	"word_wrap": false,
	"extensions": ["v", "vh", "sv", "svh"],
	// Allow a dot to trigger autocomplete, except in string, comment or constant
	"auto_complete_triggers": [
		{"selector": "source.systemverilog - string - comment - constant", "characters": ".$`:{,"}
	],
	// Extension for verilog/SystemVerilog file used to enable/disable autocompletion and select file for parsing
	// Header files are excluded from files to parse for module definition
	"sv.v_ext"  : ["v"  ],
	"sv.sv_ext" : ["sv" ],
	"sv.vh_ext" : ["vh" ],
	"sv.svh_ext": ["svh"],

	"sv.tooltip" : true, // True to display information in a tooltip (sublime 3072+), false to use the status bar instead
	"sv.tooltip_hide_on_move" : true, // True to hide the tooltip when the mouse move away from the tooltip
	"sv.tooltip_show_module_on_port" : false, // True to include module type and instance when showing tooltip for a port
	"sv.tooltip_show_refs" : true, // True to show reference to module/interface/...
	"sv.tooltip_show_signal_links" : false, // True to show links to driver/reference for signals
	// SystemVerilog Alignment configuration
	"sv.one_bind_per_line"     : true,  // When aligning module instantiation force only one binding per line
	"sv.one_decl_per_line"     : false, // When aligning signal declaration force only one signal per line
	"sv.max_line_length"       : 120,   // Use by alignment plugin to split one line into multiple if too long
	"sv.strip_empty_line"      : true,  // Strip empty line inside Module declaration/alignement
	"sv.mod_import_same_line"  : false, // When aligning module declaration, put import statement on same line as module
	"sv.alignment_ignore_tick" : false, // Ignore line identation for every line starting with `ifdef,`elsif,...
	"sv.align_comma_semicolon" : true,  // Aligne comma/semi-colon for signal/port declaration
	"sv.align_paren"           : true, // Aligne closing parenthesis for module instance
	"sv.param_port_alignment"  : true,  // Control if parameters/ports binding are align together
	// SystemVerilog always block completion configuration
	"sv.clk_name"           : "clk",    // Default clock name
	"sv.rst_name"           : "rst",    // Default reset active high
	"sv.rst_n_name"         : "rst_n",  // Default reset active low
	"sv.always_name_auto"   : true,     // Look for existing always block in the file to retrieve name of clk/reset
	"sv.always_ff_begin_end": true,     // Enclose the whole always block with begin/end
	"sv.always_one_cursor"  : false,    // Enclose the whole always block with begin/end
	"sv.always_label"       : true,     // Enable label for always block (only if begin/end are present)
	"sv.always_end_label"   : false,     // Enable end label for always block (only if begin/end are present and always_lavel is true)
	"sv.always_sv_only"     : true,     // In .sv file only display completion for always_comb, always_ff or always_latch (no simple always)
	"sv.clk_en_name"        : "clk_en", // Default clock enable name : empty string if you do not want a clock enable in the snippet
	"sv.always_ce_auto"     : true,     // Detect if the clk_en signal is declared in the buffer: if not, do not use it in the always block
	"sv.indent_style"       : "1tbs",   // Indentation style used by autocompletion and beautifier when force is enabled. Options are 1tbs or gnu
	"sv.end_label_comment"  : ["endcase"],  // List of end keyword which should use a comment style (end // label) instead of an identifier syle (end : label) on auto-completion
	// SystemVerilog Module instantiation configuration
	"sv.fillparam"               : true,  // On module instantiation with parameter user is asked a value for each parameter
	"sv.param_oneline"           : true,  // On module instantiation with parameter, check if paramter binding can fit on one line
	"sv.inst_oneline"            : true,  // On module instantiation check if complete instantiation can fit on one line
	"sv.autoconnect"             : true,  // Control if signals are created and connected in module instantiation
	"sv.param_explicit"          : false, // Control if parameter setting is explicit (appears in module instantiation even when default is used)
	"sv.param_propagate"         : false, // Control if parameter setting is explicit (appear in module instantiation even when default is used)
	"sv.autoconnect_allow_prefix": true,  // True to expand search for signal to \w+_port
	"sv.autoconnect_allow_suffix": true,  // True to expand search for signal to port_\w+
	"sv.autoconnect_port_prefix" : [],    // List of prefix to remove from the port before looking for a signal connection
	"sv.autoconnect_port_suffix" : [],    // List of suffix to remove from the port before looking for a signal connection
	"sv.instance_prefix"         : "i_",  // Prefix to the module instantiation name
	"sv.instance_suffix"         : "",    // Suffix to the module instantiation name
	"sv.decl_start"              : "Signals declaration", // Pattern to find for start of signals auto-declaration . Empty string to get declaration just above instantiation.
	"sv.decl_end"                : "/*----", // Pattern to find just after start to insert signal declaration before. Empty string to use first empty line after start pattern
	"sv.decl_indent"             : 1, // Number of indentation level for signal declaration
	"sv.proc_indent"             : 1, // Number of indentation level for process
	// Popup config
	"sv.hover_max_size" : -1, // Max size of the file (in byte) to display popup info. Set to -1 to disable the limit (default), 0 to disable feature.
	// Navigation config
	"sv.hierarchy_new_window" : false, // True to open a new window to display the module hierarchy
	"sv.navbar_width" : 0.3, // Navigation bar width (default 0.2 means 20%)
	"sv.navbar_update" : 15, // Navigation bar update : bit 0 update if current file contains class, bit 1 for module, bit 2 for interface
	"sv.navbar_show_module_port"   : true, // Show all ports of current module
	"sv.navbar_show_module_signal" : false, // Show all signal declared in a module
	"sv.navbar_show_interface_cb"  : false, // Show all clocking block in an interface
	// Debug option
	"sv.autocomplete_max_lvl": 5, // Max hierachy level for autocompletion (class.struct.field.sub-field == 4 level) , -1 for no limit
	"sv.disable_autocomplete": false,
	"sv.debug": false, // Display some debug information in the console. WARNING: can be verbose and slow !
	// Completion list :
	//  - the first list element is the completion trigger
	//  - the second list element is the description appearing the completion list
	//  - the third list element is the code snippets corresponding to the completion
	// Redefine each sv.completion.xxx in the user sublime-settings file for a complete replacement
	// Define sv.completion.xxx.user to just add/update to the original xxx list
	"sv.completion.systemtask" : [
		// Messaging
		["$display"       ,"$display()",        "\\$display(\"$0\",);"           ],
		["$monitor"       ,"$monitor()",        "\\$monitor(\"$0\",);"           ],
		["$monitoron"     ,"$monitoron",        "\\$monitoron;"                  ],
		["$monitoroff"    ,"$monitoroff",       "\\$monitoroff;"                 ],
		["$sformatf"      ,"$sformatf()",       "\\$sformatf(\"$0\",)"           ],
		["$testplusargs"  ,"$test$plusargs()",  "\\$test\\$plusargs(\"$0\")"     ],
		["$valueplusargs" ,"$value$plusargs()", "\\$value\\$plusargs(\"$1\",$2)" ],
		["$finish"        ,"$finish",           "\\$finish;"                     ],
		// variable
		["$time"            , "$time"              , "\\$time()"                   ],
		["$realtime"        , "$realtime()"        , "\\$realtime()"               ],
		["$random"          , "$random()"          , "\\$random()"                 ],
		["$urandom_range"   , "$urandom_range()"   , "\\$urandom_range($1,$2)"     ],
		["$dist_uniform"    , "$dist_uniform()"    , "\\$dist_uniform($1,$2,$3)$0" ],
		["$dist_normal"     , "$dist_normal()"     , "\\$dist_normal($1,$2,$3)$0"  ],
		["$dist_exponential", "$dist_exponential()", "\\$dist_exponential($1,$2)$0"],
		["$dist_poisson"    , "$dist_poisson()"    , "\\$dist_poisson($1,$2)$0"    ],
		["$dist_chi_square" , "$dist_chi_square()" , "\\$dist_chi_square($1,$2)$0" ],
		["$dist_t"          , "$dist_t()"          , "\\$dist_t($1,$2)$0"          ],
		["$dist_erlang"     , "$dist_erlang()"     , "\\$dist_erlang($1,$2,$3)$0"  ],
		// cast
		["$cast"          ,"$cast()",           "\\$cast($0)"                    ],
		["$unsigned"      ,"$unsigned()",       "\\$unsigned($0)"                ],
		["$signed"        ,"$signed()",         "\\$signed($0)"                  ],
		["$itor"          ,"$itor()",           "\\$itor($0)"                    ],
		["$rtoi"          ,"$rtoi()",           "\\$rtoi($0)"                    ],
		["$bitstoreal"    ,"$bitstoreal()",     "\\$bitstoreal($0)"              ],
		["$realtobits"    ,"$realtobits()",     "\\$realtobits($0)"              ],
		// assertion
		["$assertoff"     ,"$assertoff()",      "\\$assertoff($0,)"              ],
		["$info"          ,"$info()",           "\\$info(\"$0\");"               ],
		["$error"         ,"$error()",          "\\$error(\"$0\");"              ],
		["$warning"       ,"$warning()",        "\\$warning(\"$0\");"            ],
		["$stable"        ,"$stable()",         "\\$stable($0)"                  ],
		["$fell"          ,"$fell()",           "\\$fell($0)"                    ],
		["$rose"          ,"$rose()",           "\\$rose($0)"                    ],
		["$past"          ,"$past()",           "\\$past($0)"                    ],
		["$isunknown"     ,"$isunknown()",      "\\$isunknown($0)"               ],
		["$onehot"        ,"$onehot()",         "\\$onehot($0)"                  ],
		["$onehot0"       ,"$onehot0()",        "\\$onehot0($0)"                 ],
		// utility
		["$size"          ,"$size()",           "\\$size($0)"                    ],
		["$countones"     ,"$countones()",      "\\$countones($0)"               ],
		["$high"          ,"$high()",           "\\$high($0)"                    ],
		["$low"           ,"$low()",            "\\$low($0)"                     ],
		// math
		["$clog2"         ,"$clog2()",          "\\$clog2($0)"                   ],
		["$log"           ,"$log()",            "\\$ln($0)"                      ],
		["$log10"         ,"$log10()",          "\\$log10($0)"                   ],
		["$exp"           ,"$exp()",            "\\$exp($0)"                     ],
		["$sqrt"          ,"$sqrt()",           "\\$sqrt($0)"                    ],
		["$pow"           ,"$pow()",            "\\$pow($1,$2)"                  ],
		["$floor"         ,"$floor()",          "\\$floor($0)"                   ],
		["$ceil"          ,"$ceil()",           "\\$ceil($0)"                    ],
		["$sin"           ,"$sin()",            "\\$sin($0)"                     ],
		["$cos"           ,"$cos()",            "\\$cos($0)"                     ],
		["$tan"           ,"$tan()",            "\\$tan($0)"                     ],
		["$asin"          ,"$asin()",           "\\$asin($0)"                    ],
		["$acos"          ,"$acos()",           "\\$acos($0)"                    ],
		["$atan"          ,"$atan()",           "\\$atan($0)"                    ],
		["$atan2"         ,"$atan2()",          "\\$atan2($1,$2)"                ],
		["$hypot"         ,"$hypot()",          "\\$hypot($1,$2)"                ],
		["$sinh"          ,"$sinh()",           "\\$sinh($0)"                    ],
		["$cosh"          ,"$cosh()",           "\\$cosh($0)"                    ],
		["$tanh"          ,"$tanh()",           "\\$tanh($0)"                    ],
		["$asinh"         ,"$asinh()",          "\\$asinh($0)"                   ],
		["$acosh"         ,"$acosh()",          "\\$acosh($0)"                   ],
		["$atanh"         ,"$atanh()",          "\\$atanh($0)"                   ],
		// file
		["$fopen"         ,"$fopen()",          "\\$fopen($0,\"r\")"             ],
		["$fclose"        ,"$fclose()",         "\\$fclose($0);"                 ],
		["$fflush"        ,"$fflush()",         "\\$fflush;"                     ],
		["$fgetc"         ,"$fgetc()",          "\\$fgetc($0,)"                  ],
		["$fgets"         ,"$fgets()",          "\\$fgets($0,)"                  ],
		["$fwrite"        ,"$fwrite()",         "\\$fwrite($0,\"\")"             ],
		["$readmemb"      ,"$readmemb()",       "\\$readmemb(\"$1\",$2)"         ],
		["$readmemh"      ,"$readmemh()",       "\\$readmemh(\"$1\",$2)"         ],
		["$sscanf"        ,"$sscanf()",         "\\$sscanf($1,\"$2\",$3)"        ]
	],
	"sv.completion.tick" :[
		["`include"       , "`include …"        , "`include \"$0\""                   ],
		["`define"        , "`define …"         , "`define $0"                        ],
		["`ifdef"         , "`ifdef …"          , "`ifdef $0"                         ],
		["`ifndef"        , "`ifndef …"         , "`ifndef $0\n\n`endif"              ],
		["`ifndef"        , "`ifndef … `define" , "`ifndef ${1/([A-Za-z0-9_]+).*/$1/}\n\t`define ${1:SYMBOL} ${2:value}\n`endif"],
		["`else"          , "`else "            , "`else "                            ],
		["`elsif"         , "`elsif …"          , "`elsif $0"                         ],
		["`endif"         , "`endif"            , "`endif"                            ],
		["`celldefine"    , "`celldefine …"     , "`celldefine\n\t$0\n`endcelldefine" ],
		["`endcelldefine" , "`endcelldefine "   , "`endcelldefine "                   ],
		["`line"          , "`line "            , "`line "                            ],
		["`resetall"      , "`resetall "        , "`resetall"                         ],
		["`timescale"     , "`timescale …"      , "`timescale $0"                     ],
		["`undef"         , "`undef …"          , "`undef $0"                         ]
	],
	"sv.completion.uvm" :[
        ["uvm_config_db_get" , "uvm_config_db_get" , "uvm_config_db#()::get(this, \"$1\", \"$0\", $0);" ],
        ["uvm_config_db_set" , "uvm_config_db_set" , "uvm_config_db#()::set(this, \"$1\", \"$0\", $0);" ],
        ["uvm_report_info"   , "uvm_report_info"   , "uvm_report_info(\"$1\", \"$0\", UVM_NONE);" ],
        ["uvm_report_warning", "uvm_report_warning", "uvm_report_warning(\"$1\", \"$0\");" ],
        ["uvm_report_error"  , "uvm_report_error"  , "uvm_report_error(\"$1\", \"$0\");" ],
        ["uvm_report_fatal"  , "uvm_report_fatal"  , "uvm_report_fatal(\"$1\", \"$0\");" ]
	],
	// For each completion: the different elements are:
	//  0: the trigger
	//  1: the annotation
	//  2: the snippet itself
	//  3: the scope which must be present
	//  4: the scope which must not be present
	"sv.completion.core" :[
		["if"         , "block"       , "if (${1:/* condition */}) begin\n\t${0:/* code */}\nend" , [], []],
		["case"       , "block"       , "case (${1:/* switch */})\n\n\tdefault : ${0:/* default */};\nendcase" , [], []],
		["begin"      , "block"       , "begin\n\t$0\nend"            , [], []],
		["generate"   , "block"       , "generate\n\t$0\nendgenerate" , [], []],
		["for"        , "loop"        , "for (int ${2:i} = 0; $2 < ${1:count}; ${3:$2++}) begin\n\t${0:/* code */}\nend" , [], []],
		["foreach"    , "loop"        , "foreach ($1) begin\n\t$0\nend", [], []],
		["class"      , "declaration" , "class ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} extends ${2: /* base class*/};\n\t$0\nendclass : ${1}" , [], []],
		["uvmclass"   , "declaration" , "class ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} extends ${2: /* base class*/};\n\n/*-------------------------------------------------------------------------------\n-- Interface, port, fields\n-------------------------------------------------------------------------------*/\n\t${0}\n\n/*-------------------------------------------------------------------------------\n-- UVM Factory register\n-------------------------------------------------------------------------------*/\n\t// Provide implementations of virtual methods such as get_type_name and create\n\t`uvm_component_utils(${1})\n\n/*-------------------------------------------------------------------------------\n-- Functions\n-------------------------------------------------------------------------------*/\n\t// Constructor\n\tfunction new(string name = \"${1}\", uvm_component parent=null);\n\t\tsuper.new(name, parent);\n\tendfunction : new\n\nendclass : ${1}", [], []],
		["constraint" , "declaration" , "constraint ${1:c} {\n\t${0}\n}" , [], []],
		["covergroup" , "declaration" , "covergroup ${1:cg}();\n\t${0}\nendgroup : ${1:cg}" , [], []],
		["function"   , "declaration" , "function ${1:void} ${2:funcname}($3);\n\t$0\nendfunction : ${2}" , [], []],
		["interface"  , "declaration" , "interface ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} ();\n\t$0\nendinterface : $1", [], []],
		["module"     , "declaration" , "module ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}} (\n\tinput clk,    // Clock\n\tinput clk_en, // Clock Enable\n\tinput rst_n,  // Asynchronous reset active low\n\t${0}\n);\n\nendmodule : $1" , [], []],
		["package"    , "declaration" , "package ${1:${TM_FILENAME/(.+)\\..+|.*/$1/:name}};\n\t$0\nendpackage : $1" , [], []],
		["task"       , "declaration" , "task ${1:taskname}($2);\n\t$0\nendtask : ${1}", [], []],
		["import"     , "declaration" , "import ${1:pkgname}::${2:*};\n$0", [], []],
		["forkj"      , "fork..join"  ,"fork\n\t$0\njoin"            , [], []],
		["forkn"      , "fork..none"  ,"fork\n\t$0\njoin_none"       , [], []],
		["forka"      , "fork..any"   ,"fork\n\t$0\njoin_any"        , [], []],
		["posedge"    , "event"   ,"posedge ${0:clk}"   , ["sensitivity"], []],
		["negedge"    , "event"   ,"negedge ${0:rst_n}" , ["sensitivity"], []],
	]
}
