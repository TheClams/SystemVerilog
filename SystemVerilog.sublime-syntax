%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: SystemVerilog
file_extensions: [sv, v, svh, vh]
scope: source.systemverilog
variables:
  id: '[A-Za-z_][A-Za-z_0-9]*'
  ID: '[A-Z_][A-Z0-9_]*\b'
  keyword_base: '(always|always_ff|always_comb|always_latch|assign|initial|if|else|for|end|endcase|endmodule|endclass|endfunction|endtask|endclocking|iff|intersect|and|or|throughout|within|constraint|default|clocking|function|task|virtual|const|typedef|localparam|parameter|logic|int|generate)\b'
contexts:
  main:
    - include: module-def
    - include: program-def
    - include: class-def
    - include: interface-def
    - include: package-def
    - include: modport
    - include: general

  general:
    - include: extern-decl
    - include: function-def
    - include: task-def
    - include: nettype-def
    - include: cover
    - include: constraint
    - include: assertion
    - include: keyword-control
    - include: process
    - include: keyword-misc
    - include: comments
    - include: macro
    - include: all-types
    - include: struct-assign
    - include: concat
    - include: group
    - include: operators
    - include: port-dir
    - include: strings
    - include: system-task
    - include: casting
    - include: nettype
    - include: user-defined-type
    - include: module-or-obj-inst
    - include: scoping
    - include: function-call
    - include: constants

  group:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      push:
        - meta_scope: meta.group.systemverilog
        - match: \)
          scope: punctuation.section.group.end.systemverilog
          pop: true
        - match: '[^\)\n]*$(?!\n)'
          scope: invalid.illegal.unbalanced-bracket
        - include: general
    - match: '\['
      scope: punctuation.section.brackets.begin.systemverilog
      push:
        - meta_scope: meta.group.systemverilog
        - match: '\]'
          scope: punctuation.section.brackets.end.systemverilog
          pop: true
        - match: '[^\]\n]*$(?!\n)'
          scope: invalid.illegal.unbalanced-bracket
        - include: general
    - match: '\)|\]'
      scope: invalid.illegal.stray-bracket-end
  casting:
    - match: '\s*\b({{id}})('')(?=\()'
      scope: meta.cast.systemverilog
      captures:
        1: storage.type.systemverilog
        2: keyword.operator.cast.systemverilog
  # Type Definition
  user-defined-type:
    - match: \s*\b(localparam|parameter)\b
      scope: meta.param.systemverilog
      captures:
        1: keyword.other.systemverilog
      push:
        - include: comments
        - include: type-base
        - include: type-or-name-inst
        - include: else-pop
    - match: \s*\b(static|local|const|protected|virtual)\b
      captures:
        1: keyword.other.systemverilog
      push:
        - match: \b(?:static|local|const|protected|virtual)\b
          scope: keyword.other.systemverilog
        - include: rand-modifier
        - include: comments
        - include: type-base
        - include: type-or-name-inst
        - include: else-pop

  nettype-def:
    - match: '\s*\b(nettype)\s+({{id}})\s+({{id}})(\s+(with)\s+({{id}}))?'
      captures:
        1: keyword.control.systemverilog
        2: storage.type.systemverilog
        3: entity.name.type.systemverilog
        5: keyword.control.systemverilog
        6: support.function.resolve.systemverilog
  var-decl:
    - match: '(?:({{id}})\s*(::)\s*)?({{id}})\s+{{id}}'
      scope: meta.userdefined.systemverilog
      captures:
        1: support.type.scope.systemverilog
        2: keyword.operator.scope.systemverilog
        3: storage.type.userdefined.systemverilog
  lifetime:
    - match: \b(static|automatic)\b
      scope: keyword.other.lifetime.systemverilog
  nettype:
    - match: '\s*\b(tri|tri[01]|supply[01]|wand|triand|wor|trior|trireg|wire|uwire)\b'
      scope: storage.type.net.systemverilog
      push:
        - include: type-base
        - include: var-decl
        - include: type-modifier
        - include: else-pop
  data-decl:
    - match: '\s*\b(?:(const)\s+)?\b(var)\b'
      captures:
        1: keyword.other.const.systemverilog
        2: storage.type.var.systemverilog
        3: keyword.other.lifetime.systemverilog
      push:
        - include: lifetime
        - include: type-base
        - include: var-decl
        - include: type-modifier
        - include: else-pop
  type-modifier:
    - match: '\b(?:un)?signed\b'
      scope: storage.modifier.sign.systemverilog
    - match: '\b(vectored|scalared)\b'
      scope: storage.modifier.vector.systemverilog
  rand-modifier:
    - match: \s*\b(rand|randc)\b
      scope: storage.modifier.rand.systemverilog
      push:
        - include: comments
        - include: data-decl
        - include: type-base
        - include: type-or-name-inst
        - include: else-pop
  storage-modifier-systemverilog:
    - match: '\b(small|medium|large|supply[01]|strong[01]|pull[01]|weak[01]|highz[01])\b'
      scope: storage.modifier.systemverilog
    - match: '(\[)\s*(\$)\s*(\])'
      captures:
        1: punctuation.section.brackets.begin.systemverilog
        2: keyword.operator.systemverilog
        3: punctuation.section.brackets.end.systemverilog
  type-base:
    - match: '\s*\b(integer|int|longint|shortint|byte|shortreal|chandle|string|time|realtime|real|process|void|event|semaphore|mailbox|interconnect|untyped|genvar)\b'
      scope: storage.type.systemverilog
    - match: '\s*\b(reg|logic|bit)\b'
      scope: storage.type.systemverilog
      push:
        - match: '\b(signed|unsigned)\b'
          scope: storage.modifier.systemverilog
        - match: (?={{keyword_base}})
          pop: 1
        - match: '{{ID}}'
          scope: constant.other.net.systemverilog
          pop: 1
        - match: '{{id}}'
          pop: 1
        - include: comments
        - include: packed-dim
        - include: else-pop
  type-base-novar:
    - match: '\s*\b(integer|int|longint|shortint|byte|shortreal|chandle|string|time|realtime|real|process|void|event|semaphore|mailbox|interconnect|untyped|genvar)\b'
      scope: storage.type.systemverilog
    - match: '\s*\b(reg|logic|bit)\b'
      scope: storage.type.systemverilog

  scoping:
    - match: '\b({{id}})\s*(::)'
      scope: meta.scope.systemverilog
      captures:
        1: support.type.scope.systemverilog
        2: keyword.operator.scope.systemverilog


  all-types:
    - include: type-base
    - include: nettype
    - include: data-decl
    - include: type-modifier
    - include: rand-modifier
    - include: struct_decl
    - match: '^\s*(?:(var|wire)\s+)?({{id}})\s*(::)\s*({{id}})\s+{{id}}'
      captures:
        1: keyword.other.static.systemverilog
        2: support.type.scope.systemverilog
        3: keyword.operator.scope.systemverilog
        4: storage.type.userdefined.systemverilog
    - match: \s*\b(type)\b
      captures:
        1: keyword.other.systemverilog
    - match: ^\s*(typedef)\s+(class|enum|struct|union|interface\s+class)\s+({{id}})\s*(;)
      scope: meta.typedef_forward.systemverilog
      captures:
        1: keyword.control.systemverilog
        2: keyword.other.systemverilog
        3: storage.type.userdefined.systemverilog
        4: punctuation.terminator.systemverilog
    - match: \s*\b(typedef)\b
      captures:
        1: keyword.control.systemverilog
      push: [typedef_symbol, typedef_decl]
    - match: \s*\b(uvm_transaction|uvm_component|uvm_monitor|uvm_driver|uvm_test|uvm_env|uvm_object|uvm_agent|uvm_sequence_base|uvm_sequence|uvm_sequence_item|uvm_sequence_state|uvm_sequencer|uvm_sequencer_base|uvm_component_registry|uvm_analysis_imp|uvm_analysis_port|uvm_analysis_export|uvm_config_db|uvm_active_passive_enum|uvm_phase|uvm_verbosity|uvm_tlm_analysis_fifo|uvm_tlm_fifo|uvm_report_server|uvm_objection|uvm_recorder|uvm_domain|uvm_reg_field|uvm_reg|uvm_reg_block|uvm_bitstream_t|uvm_radix_enum|uvm_printer|uvm_port_base|uvm_tlm_if_base|uvm_packer|uvm_comparer|uvm_scope_stack)\b
      scope: storage.type.uvm.systemverilog
    - include: storage-modifier-systemverilog
    - match: '\b(and|nand|nor|or|xor|xnor|buf|not|bufif[01]|notif[01]|r?[npc]mos|tran|r?tranif[01]|pullup|pulldown)\b'
      scope: support.type.primitive.systemverilog
  #
  keyword-control:
    - match: '\s*\b(begin)\b\s*(:)\s*({{id}})\b'
      scope: meta.definition.systemverilog
      captures:
        0: meta.section.begin.systemverilog
        1: keyword.other.block.systemverilog
        2: keyword.operator.systemverilog
        3: entity.name.section.systemverilog
    - match: \s*\b(end)\b(\s*(:)\s*(\w+))?
      captures:
        1: keyword.other.block.systemverilog
        3: keyword.operator.systemverilog
        4: entity.label.systemverilog
    - match: '\s*\b(disable)\b\s*(?:(fork|iff)|({{id}}))?'
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
    - match: '\s*\b(wait)\s+(fork)\b'
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
    - match: '\s*\b(fork)\b\s*(?:(:)\s*({{id}}))?'
      scope: meta.definition.systemverilog
      captures:
        0: meta.section.fork.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.name.section.systemverilog
      push:
        - meta_scope: meta.section.fork.systemverilog
        - match: \s*\b(join|join_any|join_none)\b(\s*(:)\s*(?:(\3)\b|({{id}})))?
          scope: meta.object.end.systemverilog
          captures:
            1: keyword.control.systemverilog
            3: keyword.operator.systemverilog
            4: entity.label.systemverilog
            5: invalid.illegal.systemverilog
          pop: true
        - include: general
    - match: \bcase(?:x|z)?\b
      scope: keyword.control.systemverilog
      push:
        - meta_scope: meta.section.case.systemverilog
        - match: \s*\bendcase\b
          scope: keyword.control.systemverilog
          pop: true
        - include: general
    - match: \s*\b(begin|end|fork|disable|wait|force|release|posedge|negedge|edge|forever|repeat|while|for|if|iff|else|default|endcase|return|break|continue|do|foreach|with|inside|clocking|cover|property|randcase|matches|solve|assert|assume|before|expect|cross|ref|first_match|srandom|struct|packed|final|alias|tagged|extern|throughout|timeprecision|timeunit|priority|type|union|wait_order|triggered|randsequence|import|export|context|pure|intersect|wildcard|within|new|enum|this|super|forkjoin|unique|unique0|priority|soft|dist)\b
      captures:
        1: keyword.control.systemverilog
  # Misc keyword with just basic handling (to be improved)
  keyword-misc:
    - match: '\s*(primitive|interface|checker)\s+(?:(static|automatic)\s+)?\b({{id}})\b'
      scope: meta.definition.systemverilog
      captures:
        1: keyword.other.systemverilog
        2: keyword.other.systemverilog
        3: entity.name.type.class.systemverilog
    - match: \s*\b(automatic|cell|config|deassign|defparam|design|disable|endconfig|endgenerate|endspecify|endtable|generate|iff|ifnone|incdir|instance|liblist|library|macromodule|noshowcancelled|pulsestyle_onevent|pulsestyle_ondetect|showcancelled|specify|specparam|table|use)\b
      captures:
        1: keyword.other.systemverilog
    - match: \s*\b(endtask|endmodule|endfunction|endprimitive|endsequence|endprogram|endclocking|endproperty|endchecker)\b(\s*(:)\s*(\w+))?
      scope: meta.object.end.systemverilog
      captures:
        1: keyword.control.systemverilog
        3: keyword.operator.systemverilog
        4: entity.label.systemverilog
  struct-assign :
    - match: '(\''{)'
      scope: keyword.operator.struct.begin.systemverilog
      push:
        - meta_scope: meta.struct.assign.systemverilog
        - match: \}
          scope: keyword.operator.struct.end.systemverilog
          pop: true
        - match: '\b(default)\s*(:)(?!:)'
          captures:
            1: keyword.control.systemverilog
            2: keyword.operator.other.systemverilog
        - match: '\b({{id}})\s*(:)(?!:)'
          captures:
            1: support.function.field.systemverilog
            2: keyword.operator.other.systemverilog
        - include: concat
        - include: struct-assign
        - include: comments
        - include: strings
        - include: operators
        - include: macro
        - include: constants
        - include: system-task
        - include: casting
        - include: scoping
  concat :
    - match: \{
      scope: keyword.operator.concat.begin.systemverilog
      push:
        - meta_scope: meta.concat.systemverilog
        - match: \}
          scope: keyword.operator.concat.end.systemverilog
          pop: true
        - include: concat
        - include: struct-assign
        - include: comments
        - include: strings
        - include: operators
        - include: macro
        - include: constants
        - include: system-task
        - include: scoping
  modport:
    - match: \s*\b(modport)\s+(\w+)
      captures:
        1: keyword.modport.systemverilog
        2: entity.name.modport.systemverilog
      push:
        - meta_scope: meta.modport.systemverilog
        - include: comments
        - match: \s*(output|input|inout|ref)\b
          captures:
            1 : support.type.systemverilog
        - match: \s*(import|export|clocking)\b
          captures:
            1 : keyword.other.systemverilog
        - match: ';'
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: \s*(task)\s+({{id}})
          captures:
            1 : keyword.other.systemverilog
            2 : entity.name.function.prototype.systemverilog
          push: func-task-port-import
        - match: \s*(function)\b
          captures:
            1 : keyword.other.systemverilog
          push:
            - meta_scope: meta.function.prototype.systemverilog
            - match: '\s*\b(?:({{id}})\s*(::)\s*)?({{id}}\s+)({{id}})\b'
              captures:
                1: support.type.scope.systemverilog
                2: keyword.operator.scope.systemverilog
                3: storage.type.systemverilog
                4: entity.name.function.systemverilog
              set: func-task-port-import
            - match: '\b(?:({{id}})\s*(::)\s*)?({{id}}\s+)?({{id}})\s*(?=\(|;)'
              captures:
                1: support.type.scope.systemverilog
                2: keyword.operator.scope.systemverilog
                3: storage.type.systemverilog
                4: entity.name.function.systemverilog
              set: func-task-port-import
            - include: base-grammar
            - include: system-task
            - match: '({{id}})\s*(?=\[)'
              captures:
                1: storage.type.userdefined.systemverilog
        - include: base-grammar

  base-grammar:
    - include: all-types
    - include: comments
    - include: operators
    - include: macro
    - include: constants
    - include: strings
    - include: nettype
    - match: '^\s*(?:(static)\s+)?(?:(var|wire)\s+)?(({{id}})\s*(::)\s*)?({{id}})\s+{{id}}'
      captures:
        1: keyword.other.static.systemverilog
        2: storage.type.net.systemverilog
        4: support.type.scope.systemverilog
        5: keyword.operator.scope.systemverilog
        6: storage.type.userdefined.systemverilog
    - match: \b(var|wire)\b
      scope: storage.type.net.systemverilog
    - include: scoping

  process:
    - match: \s*\b(initial|always|always_comb|always_ff|always_latch|assign)\b
      captures:
        1: keyword.control.systemverilog
  comments:
    - match: /\*
      captures:
        0: punctuation.definition.comment.systemverilog
      push:
        - meta_scope: comment.block.systemverilog
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.systemverilog
      captures:
        1: punctuation.definition.comment.systemverilog
    # Attributes
    - match: ^\s*(\(\*)\s*\w
      captures:
        1: punctuation.definition.attribute.systemverilog
      push:
        - meta_scope: comment.attribute.systemverilog
        - match: \*\)
          pop: true
          captures:
            0: punctuation.definition.attribute.systemverilog
  constants:
    - match: \b\d+(\.\d+)?\s*(fs|ps|ns|us|ms|s)\b
      scope: constant.numeric.time.systemverilog
    - match: '(\b\d+)?''(s?[bB]\s*[0-1xXzZ?][0-1_xXzZ?]*|s?[oO]\s*[0-7xXzZ?][0-7_xXzZ?]*|s?[dD]\s*[0-9xXzZ?][0-9_xXzZ?]*|s?[hH]\s*[0-9a-fA-FxXzZ?][0-9a-fA-F_xXzZ?]*)((e|E)(\+|-)?[0-9]+)?(?!''|\w)'
      scope: constant.numeric.systemverilog
    - match: "'[01xXzZ]"
      scope: constant.numeric.bit.systemverilog
    - match: '\b((\d[\d_]*)(e|E)(\+|-)?[0-9]+)\b'
      scope: constant.numeric.exp.systemverilog
    - match: '\b(\d[\d_]*)\b'
      scope: constant.numeric.decimal.systemverilog
    - match: '\b([A-Z][A-Z0-9_]*)\b'
      scope: constant.other.net.systemverilog
    - match: \b(null)\b
      scope: support.constant.systemverilog

  macro:
    - match: '^\s*(`define)\s+({{id}})'
      scope: meta.define.systemverilog
      captures:
        1: constant.other.preprocessor.systemverilog
        2: entity.name.type.define.systemverilog
    - match: (`ifdef|`elsif|`ifndef|`default_nettype)\s+(\w+)
      captures:
        1: constant.other.preprocessor.systemverilog
        2: support.variable.systemverilog
    - match: ^\s*(`pragma)\s+(\w+)\b.*$
      captures:
        1: constant.other.preprocessor.systemverilog
        2: support.variable.systemverilog
    - match: '`(celldefine|else|elsif|endcelldefine|endif|include|line|nounconnected_drive|resetall|timescale|unconnected_drive|undef|begin_\w+|end_\w+|remove_\w+|restore_\w+)\b'
      scope: constant.other.preprocessor.systemverilog
    - match: '(``)\b({{id}})\b(``)?'
      captures:
        1: punctuation.section.interpolation.end.systemverilog
        2: variable.macro.systemverilog
        3: punctuation.section.interpolation.end.systemverilog
    - include: macro-call
    - include: macro-strings
  macro-call:
    - match: '`\b({{id}})\b'
      scope: constant.other.define.systemverilog

  system-task:
    - match: '\$\b({{id}})\b'
      scope: support.function.system.systemverilog
  function-call:
    - match: \b(\w+)(?=\s*\()
      scope: support.function.generic.systemverilog
  ifmodport:
    - match: '\b({{id}})(\.)({{id}})\s+({{id}})\b'
      captures:
        1: storage.type.interface.systemverilog
        2: punctuation.accessor.dot.systemverilog
        3: support.modport.systemverilog

  binding-block:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      push:
        - include: binding-body
        - include: comments
        - match: \)
          scope: punctuation.section.group.end.systemverilog
          pop: true
    - include: comments
    - include: else-pop
  binding-body:
    - match: '(\.)({{id}})\s*(\()'
      captures:
        1: punctuation.accessor.dot.systemverilog
        2: support.function.port.systemverilog
        3: punctuation.section.group.begin.systemverilog
      push: binding-signal
    - match: \w(\.)({{id}})
      captures:
        1: punctuation.accessor.dot.systemverilog
    - match: (\.)({{id}})\s*
      captures:
        1: punctuation.accessor.dot.systemverilog
        2: support.function.port.implicit.systemverilog
    - match: \.\*
      scope: keyword.operator.assignment.binding.systemverilog
    - include: binding-signal
    # Handle parameterized type in parameter list
    - match: '({{id}})\s*(#)'
      captures:
        1: storage.type.userdefined.systemverilog
        2: keyword.operator.other.param.systemverilog
      push: binding-block
    # Catch case of module instance in module instance (due to macro for example)
    - match: '({{id}})\s+({{id}})\s*(\()'
      scope: meta.fallback.instance.systemverilog
      captures:
        1: storage.type.module.systemverilog
        2: entity.name.type.module.systemverilog
        3: punctuation.section.group.begin.systemverilog

  binding-signal:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      push: binding-signal
    - match: \)
      scope: punctuation.section.group.end.systemverilog
      pop: true
    - include: constants
    - include: comments
    - include: operators
    - include: strings
    - include: macro
    - include: system-task
    - include: scoping
    - match: '\b({{id}})('')'
      captures:
        1: storage.type.interface.systemverilog
        2: keyword.operator.cast.systemverilog
    - match: \b(virtual)\b
      scope: keyword.control.systemverilog

  block-param-bind:
    - match: (#)\s*(\()
      captures:
        1: keyword.operator.other.param.systemverilog
        2: punctuation.section.group.begin.systemverilog
      push:
        - meta_scope: meta.bind.param.systemverilog
        - match: \)
          scope: punctuation.section.group.end.systemverilog
          pop: true
        - include: binding-body
        - include: scoping
        - include: comments
        - include: operators
        - include: macro
        - include: constants
        - include: strings
        - match: \b(virtual)\b
          scope: keyword.control.systemverilog

  block-param-def-start:
    - match: (#)\s*(\()
      captures:
        1: keyword.operator.other.param.systemverilog
        2: punctuation.section.group.begin.systemverilog
      push:
        - meta_scope: meta.param.definition.systemverilog
        - include: block-param-def-body

  block-param-def-body:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      push: block-param-def-body
    - match: \)
      scope: punctuation.section.group.end.systemverilog
      pop: true
    - match: \s*(parameter|localparam)\b
      scope: keyword.other.systemverilog
    - include: block-param-bind
    - include: base-grammar
    - include: function-call
    - match: \b(virtual)\b
      scope: keyword.control.systemverilog
    # Handle parameterized type in parameter list
    - match: '({{id}})\s*(#)'
      captures:
        1: storage.type.userdefined.systemverilog
        2: keyword.operator.other.param.systemverilog

  # Block definition
  module-def:
    - match: '\s*(module)\s+\b({{id}})\b'
      captures:
        1: keyword.control.systemverilog
        2: entity.name.type.module.systemverilog
      set: [module-body , module-port]
  module-port:
    - meta_scope: meta.module.port.systemverilog
    - match: ;
      scope: punctuation.terminator.systemverilog
      pop: true
    - match: '\s*\bimport\b'
      scope: keyword.control.systemverilog
      push:
        - match: ;
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: '\b({{id}})\s*(::)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
        - match: '\*'
          scope: keyword.operator.systemverilog
    - include: port-dir
    - match: \s*(parameter|localparam)\b
      scope: keyword.other.systemverilog
    - include: base-grammar
    - include: ifmodport
  module-body:
    - meta_scope: meta.module.body.systemverilog
    - match: \b(endmodule)(?:\s*(:)\s*(?:(\2)\b|({{id}})))?
      captures:
        0: meta.object.end.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: class-def
    - include: general

  interface-def:
    - match: '\s*(interface)\s+\b({{id}})\b'
      captures:
        1: keyword.other.systemverilog
        2: entity.name.type.interface.systemverilog
      set: [interface-body , interface-port]
  interface-port:
    - meta_scope: meta.interface.port.systemverilog
    - match: ;
      scope: punctuation.terminator.systemverilog
      pop: true
    - match: '\s*\bimport\b'
      scope: keyword.control.systemverilog
      push:
        - match: ;
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: '\b({{id}})\s*(::)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
        - match: '\*'
          scope: keyword.operator.systemverilog
    - include: port-dir
    - match: \s*(parameter|localparam)\b
      scope: keyword.other.systemverilog
    - include: base-grammar
    - include: ifmodport
  interface-body:
    - meta_scope: meta.interface.body.systemverilog
    - match: \b(endinterface)(?:\s*(:)\s*(?:(\2)\b|({{id}})))?
      captures:
        0: meta.object.end.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: modport
    - include: class-def
    - include: general

  bind-path:
    - match : '`\w+\b'
      scope: constant.other.systemverilog
      set:
        - meta_scope: meta.annotation.identifier.bind-path.systemverilog
        - match : '(\.)(`\w+)\b'
          captures:
            1: punctuation.accessor.dot.systemverilog
            2: constant.other.systemverilog
        - match : '(\.)\w+'
          captures:
            1: punctuation.accessor.dot.systemverilog
        - match: ''
          pop: true
    - match : '\w+\b'
      set:
        - meta_scope: meta.annotation.identifier.bind-path.systemverilog
        - match : '(\.)(`\w+)\b'
          captures:
            1: punctuation.accessor.dot.systemverilog
            2: constant.other.systemverilog
        - match : '(\.)\w+'
          captures:
            1: punctuation.accessor.dot.systemverilog
        - match: ''
          pop: true
    - include: else-pop

# Branches to check for module instantiation or class object declaration
#  - First eliminate cases where logical word operator are used : and/or/within/intersect/...
#  - Then check for parameters, packed array dimension
  module-or-obj-inst:
    - match: (?:^\s*|\b)bind\b
      scope: keyword.control.systemverilog
      push: [module-inst-type, bind-path]
    - match: (?={{id}}\s*(\b\w|#[^#]|\[|\n))
      branch_point: bp-module
      branch:
        - test-var-name
        - module-inst-type
        - obj-inst-type--bpmod
        - obj-inst-name--bpmod

  test-var-name:
    - match: '\b([A-Z][A-Z0-9_]*)\b'
      scope: constant.other.net.systemverilog
      set: test-var-kw
    - match: '{{id}}'
      set: test-var-kw

  test-var-kw:
    - include: comments
    - include: packed-dim
    - match: (?={{keyword_base}})
      pop: true
    - match: (?=\S)
      fail: bp-module

  module-inst-type:
    - meta_scope: meta.module.inst.systemverilog
    - match: '{{id}}'
      scope : storage.type.module.systemverilog
      push : [module-inst-name, opt-packed-dim, opt-param-bind]
    - include: comments
    - include: else-pop

  obj-inst-type--bpmod:
    - meta_scope: meta.obj.inst.systemverilog
    - match: '{{id}}'
      scope : storage.type.userdefined.systemverilog
      set : [obj-inst-name--bpmod, opt-packed-dim, opt-param-bind]
    - include: comments
    - match: (?=\S)
      fail: bp-module

  obj-inst-name--bpmod:
    - match: '\b({{ID}})\b'
      scope: constant.other.net.systemverilog
      pop: true
    - match: '{{id}}'
      pop: true
    - include: comments
    - match: (?=\S)
      fail: bp-module

  type-or-name-inst:
    - match: (?={{id}})
      branch_point: bp-id
      branch:
        - test-var-kw--bpid
        - obj-inst-type--bpid
        - obj-inst-name--bpid

  test-var-kw--bpid:
    - match: (?={{keyword_base}})
      pop: 2
    - match: (?=\S)
      fail: bp-id

  obj-inst-type--bpid:
    - meta_scope: meta.obj.inst.systemverilog
    - match: '({{id}}(::))?({{id}})'
      captures:
        1 : support.type.scope.systemverilog
        2 : keyword.operator.scope.systemverilog
        3 : storage.type.userdefined.systemverilog
      set : [obj-inst-name--bpid, opt-packed-dim, opt-param-bind]
    - include: comments
    - match: (?=\S)
      fail: bp-id

  obj-inst-name--bpid:
    - match: '\b({{ID}})\b'
      scope: constant.other.net.systemverilog
      pop: 2
    - match: '{{id}}'
      pop: 2
    - include: comments
    - match: (?=\S)
      fail: bp-id

  packed-dim:
    - match: \[
      scope: punctuation.section.brackets.begin.systemverilog
      push:
        - match: '\]'
          scope: punctuation.section.brackets.end.systemverilog
          pop: true
        - match: '\:'
          scope: keyword.operator.range.systemverilog
        - include: constants
        - include: macro-call
        - include: group
        - include: operators
        - include: system-task

  opt-packed-dim:
    - include: packed-dim
    - include: comments
    - include: else-pop

  opt-param-bind:
    - match: '#(?!#)'
      scope: keyword.operator.other.param.systemverilog
      push:
        - meta_content_scope: meta.block.bind.param.systemverilog
        - include: binding-block
    - include: else-pop

  module-inst-name:
    - match: '{{id}}'
      scope: entity.name.type.module.systemverilog
      set:
        - match: (?=\()
          # meta_scope: meta.module.bind.port.systemverilog
          set:
            - - include: terminator
            - - match: (?=\S)
                pop: 2
            - - meta_scope: meta.module.bind.port.systemverilog
              - include: binding-block
        - include: comments
        # - include: else-pop
        - match: (?=\S)
          fail: bp-module
    - match: (?=\S)
      fail: bp-module
    - include: comments

  terminator:
    - include: comments
    - match: ';'
      scope: punctuation.terminator.systemverilog
      pop: 2

# Class / interface Class definition
  class-def:
    - match: '\s*\b(?:(virtual|interface)\s+)?(class)\s+\b({{id}})\b'
      scope: meta.definition.class.systemverilog
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
        3: entity.name.type.class.systemverilog
      push: [ class-body, class-base]
  class-base:
    - include: block-param-def-start
    - match: \b(extends|implements)\b
      scope: keyword.control.systemverilog
      push:
        - meta_scope: meta.implements.systemverilog
        - match: ;
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: (?:({{id}})\s*(::)\s*)?({{id}})
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: entity.other.inherited-class.systemverilog
        - include: block-param-bind
    - include: else-pop
  class-body:
    - meta_scope: meta.class.body.systemverilog
    - match: \s*\b(endclass)(?:\s*(:)\s*(?:(\3)\b|({{id}})))?
      captures:
        0: meta.object.end.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: class-def
    - include: general

  program-def:
    - match: '\b(program)\s+(?:(static|automatic)\s+)?\b({{id}})\b'
      captures:
        1: keyword.other.systemverilog
        2: keyword.other.systemverilog
        3: entity.name.type.program.systemverilog
      push: [program-body , program-port]
  program-port:
    - meta_scope: meta.program.port.systemverilog
    - match: ;
      scope: punctuation.terminator.systemverilog
      pop: true
    - match: '\s*\bimport\b'
      scope: keyword.control.systemverilog
      push:
        - match: ;
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: '\b({{id}})\s*(::)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
        - match: '\*'
          scope: keyword.operator.systemverilog
    - include: port-dir
    - match: \s*(parameter)
      captures:
        1: keyword.other.systemverilog
    - include: base-grammar
    - include: ifmodport
  program-body:
    - meta_scope: meta.program.body.systemverilog
    - match: \b(endprogram)(?:\s*(:)\s*(?:(\3)\b|({{id}})))?
      captures:
        0: meta.object.end.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: class-def
    - include: general


  package-def:
    - match: '\s*\b(package)\s+(?:(automatic)\s+)?({{id}})\b'
      scope: meta.definition.package.systemverilog
      captures:
        1: keyword.other.systemverilog
        2: keyword.other.systemverilog
        3: entity.name.type.package.systemverilog
      push: package-body
  package-body:
    - meta_scope: meta.package.body.systemverilog
    - match: \s*\b(endpackage)(?:\s*(:)\s*(?:(\3)\b|({{id}})))?
      captures:
        0: meta.object.end.systemverilog
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: class-def
    - include: general

  operators:
    - match: (==|===|!=|!==|<=|>=|<|>)
      scope: keyword.operator.comparison.systemverilog
    - match: (=)
      scope: keyword.operator.assignment.systemverilog
    - match: (:=|:/)(?!/)
      scope: keyword.operator.constraint.dist.systemverilog
    - match: ->
      scope: keyword.operator.constraint.implies.systemverilog
    - match: (\-|\+|\*|\/|<<|>>|%)
      scope: keyword.operator.arithmetic.systemverilog
    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.systemverilog
    - match: \s*(\bor\b)
      captures:
        1: keyword.operator.logical.systemverilog
    - match: '(&|\||\^|~)'
      scope: keyword.operator.bitwise.systemverilog
    - match: '(\{|})'
      scope: keyword.operator.other.systemverilog
    - match: '(\?|:)'
      scope: keyword.operator.ternary.systemverilog
    - match: (#)(1step)
      captures:
        1: keyword.operator.delay.systemverilog
        2: keyword.other.systemverilog
    - match: (##)
      scope: keyword.operator.delay.systemverilog
    - match: (#)
      scope: keyword.operator.delay.systemverilog
      push:
        - meta_scope: meta.delay.systemverilog
        - include: constants
        - match: ''
          pop: true
    - match: (@)\s*(\()
      captures:
        1: keyword.operator.other.systemverilog
        2: punctuation.section.group.begin.systemverilog
      push :
        - meta_scope: meta.sensitivity.systemverilog
        - match: \)
          scope: punctuation.section.group.end.systemverilog
          pop: true
        - include: comments
        - include: event-expression
        - include: constants
    - match: (#|@)
      scope: keyword.operator.other.systemverilog
    # Separators
    - match: ;
      scope: punctuation.terminator.systemverilog
    - match: \,
      scope: punctuation.separator.systemverilog
    - match: \.
      scope: punctuation.accessor.dot.systemverilog
      push:
        - include: function-call
        - match: '{{ID}}'
          scope: constant.other.net.systemverilog
          pop: true
        - match: '{{id}}'
          pop: true
        - match: ''
          pop: true
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
    - match: \)
      scope: punctuation.section.group.end.systemverilog
    - match: '\['
      scope: punctuation.section.brackets.begin.systemverilog
    - match: '\]'
      scope: punctuation.section.brackets.end.systemverilog
  port-dir:
    - match: '\s*\b(output|input|inout|ref)\s+(?:(var|wire)\s+)?(?:({{id}})\s*(::)\s*)?(?:({{id}})\s+)?(?=\[[\w\*\(\)\/><\:\-\+`\$\s]*\]\s+[a-zA-Z_][a-zA-Z0-9_\s]*)'
      captures:
        1: support.type.systemverilog
        2: storage.type.net.systemverilog
        3: support.type.scope.systemverilog
        4: keyword.operator.scope.systemverilog
        5: storage.type.interface.systemverilog
    - match: '\s*\b(output|input|inout|ref)\s+(?:(var|wire)\s+)?(?:({{id}})\s*(::)\s*)?(?:({{id}})\s+)?(?=[a-zA-Z_][a-zA-Z0-9_\s]*)'
      captures:
        1: support.type.systemverilog
        2: storage.type.net.systemverilog
        3: support.type.scope.systemverilog
        4: keyword.operator.scope.systemverilog
        5: storage.type.interface.systemverilog
    - match: \s*\b(output|input|inout|ref)\b
      scope: support.type.systemverilog
    - include: system-task
  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.systemverilog
      push:
        - meta_scope: string.quoted.double.systemverilog
        - match: '"'
          captures:
            0: punctuation.definition.string.end.systemverilog
          pop: true
        - include: string-placeholder
  macro-strings:
    - match: '`"'
      scope: punctuation.definition.string.begin.systemverilog
      push:
        - meta_scope: string.quoted.double.systemverilog
        - match: '`"'
          captures:
            0: punctuation.definition.string.end.systemverilog
          pop: true
        - match: '(``)\b({{id}})\b(``)?'
          captures:
            1: punctuation.section.interpolation.end.systemverilog
            2: variable.macro.systemverilog
            3: punctuation.section.interpolation.end.systemverilog
        - include: string-placeholder
  string-placeholder:
    - match: \\.
      scope: constant.character.escape.systemverilog
    - match: |
        (?x)%
        (-?\d+)?                     # minimum field width
        [bBcCdDeEfFgGhHoOpPsStTuUxXzZ]   # conversion type
      scope: constant.other.placeholder.systemverilog
    - match: |
        (?x)%
        (-?\d+)?     # minimum field width
        (\.-?\d+)?   # precision
        [eEfFgG]     # conversion type
      scope: constant.other.placeholder.float.systemverilog
    - match: '%[lLmMvV%]'
      scope: constant.other.placeholder.systemverilog
    - match: "%"
      scope: invalid.illegal.placeholder.systemverilog

  struct_decl:
    - match: '\s*\b(?:(struct|union(?:\s+(tagged))?)|(`\w+))\b'
      captures:
        1: keyword.control.struct.systemverilog
        3: constant.other.define.systemverilog
      push:
        - match: '\bpacked\b'
          scope: keyword.control.packed.systemverilog
        - match: '{'
          scope: keyword.operator.other.systemverilog
          push:
          - meta_scope: meta.struct.anonymous.systemverilog
          - match: '}'
            scope: keyword.operator.other.systemverilog
            pop: true
          - include: base-grammar
        - include: comments
        - match: '\b({{id}})\b'
          scope: entity.name.type.struct.systemverilog
          pop: true
        - include: else-pop
  typedef_decl:
    - include: struct_decl
    - include: comments
    - match: '\b(virtual|interface)\b'
      scope: keyword.control.systemverilog
    - match: '\bclass\b'
      scope: keyword.control.systemverilog
      pop: true
    - match: '\benum\b'
      scope: keyword.control.systemverilog
      set:
        - meta_scope: meta.typedef_decl.enum
        - match: '\b{{id}}\b'
          scope: storage.type.enum.systemverilog
          push:
            - include: packed-array
            - include: else-pop
          # set:
          #   - meta_scope: meta.typedef_decl.enum.list
          #   - match: "}"
          #     scope: keyword.operator.other.systemverilog
          #     pop: true
          #   - include: base-grammar
        - match: "{"
          scope: keyword.operator.other.systemverilog
          set:
            - match: "}"
              scope: keyword.operator.other.systemverilog
              pop: true
            - include: comments
            - include: concat
            - include: macro
            - include: constants
            - include: operators
            - include: strings
    - match: '\b{{id}}\b'
      scope: storage.type.systemverilog
      pop: true
    - match: '(?=;)'
      pop: true
  typedef_symbol:
    - meta_scope: meta.typedef_symbol
    - match: ;
      scope: punctuation.terminator.systemverilog
      pop: true
    - match: '\['
      push:
        - meta_scope: inside_bracket
        - match: '\]'
          pop: true
        - include: comments
        - include: macro
        - include: constants
        - include: operators
        - include: strings
    - include: block-param-bind
    - match: '\b(signed|unsigned)\b'
      scope: storage.modifier.systemverilog
    - match: '\b({{id}})\b'
      scope: entity.name.type.systemverilog
      pop: true
    - match: \s*\b(typedef)\b
      captures:
        1: keyword.control.systemverilog
      set: [typedef_symbol, typedef_decl]
    - include: struct_decl

  else-pop:
    - match: (?=\S)
      pop: true

  packed-array :
    - match: '\['
      push:
        - meta_scope: meta.type.packed_array
        - match: '\]'
          pop: true
        - include: comments
        - include: macro
        - include: constants
        - include: operators
        - include: strings

  event-expression:
    - match: \b(iff)\b
      scope: keyword.control.systemverilog
    - match: \b(posedge|negedge|edge)\b
      scope: keyword.other.systemverilog
    - match: \b(or)\b
      scope: keyword.operator.logical.systemverilog
    - match: '\('
      scope: punctuation.section.group.begin.systemverilog
      push:
        - match: '\)'
          scope: punctuation.section.group.end.systemverilog
          pop: true
        - include: event-expression
    - include: macro-call
    - include: system-task
    - include: function-call
    - include: operators

# Assertions
  assertion :
    - match: \b(property)\s+(\w+)
      captures:
        1: keyword.sva.systemverilog
        2: entity.name.sva.systemverilog
    - match: '^\s*\b(sequence)\s+({{id}})'
      scope: meta.sequence.systemverilog
      captures:
        1: keyword.control.systemverilog
        2: entity.name.function.systemverilog
    - match: \b(\w+)\s*(:)\s*(assert|assume|cover)\b
      captures:
        1: entity.name.sva.systemverilog
        2: keyword.operator.systemverilog
        3: keyword.sva.systemverilog
    - match: \s*(//)\s*(psl)\s+((\w+)\s*(:))?\s*(default|assert|assume)
      captures:
        0: meta.psl.systemverilog
        1: comment.line.double-slash.systemverilog
        2: keyword.psl.systemverilog
        4: entity.psl.name.systemverilog
        5: keyword.operator.systemverilog
        6: keyword.psl.systemverilog
      push:
        - meta_scope: meta.psl.systemverilog
        - match: ;
          scope: punctuation.terminator.systemverilog
          pop: true
        - match: \b(never|always|default|clock|within|rose|fell|stable|until|before|next|eventually|abort|posedge)\b
          scope: keyword.psl.systemverilog
        - include: operators
        - include: function-call
        - include: constants
    - match: \s*(/\*)\s*(psl)
      captures:
        0: meta.psl.systemverilog
        1: comment.block.systemverilog
        2: keyword.psl.systemverilog
      push:
        - meta_scope: meta.psl.systemverilog
        - match: (\*/)
          captures:
            1: comment.block.systemverilog
          pop: true
        - match: ^\s*((\w+)\s*(:))?\s*(default|assert|assume)
          captures:
            0: meta.psl.systemverilog
            2: entity.psl.name.systemverilog
            3: keyword.operator.systemverilog
            4: keyword.psl.systemverilog
        - match: \b(property)\s+(\w+)
          captures:
            1: keyword.psl.systemverilog
            2: entity.psl.name.systemverilog
        - match: \b(never|always|default|clock|within|rose|fell|stable|until|before|next|eventually|abort|posedge|negedge)\b
          scope: keyword.psl.systemverilog
        - include: operators
        - include: function-call
        - include: constants

# Cover
  cover :
    - match: '\s*\b(covergroup)\b'
      captures:
        1: keyword.other.systemverilog
      push :
        - meta_scope:  meta.block.cover.systemverilog
        - match: ({{id}})
          scope: entity.name.type.covergroup.systemverilog
          set :
            - meta_scope:  meta.block.cover.systemverilog
            - include: comments
            - include: operators
            - include: macro
            - include: constants
            - include: strings
            - include: all-types
            - include: port-dir
            - match : \b(posedge|negedge|iff|bins|binsof|illegal_bins|ignore_bins|wildcard|default|sequence|matches|intersect|with\s+function\s+sample|with)\b
              scope: keyword.other.systemverilog
            - match: \s*\b((?:type_)?option)(\.)({{id}})
              captures:
                1: keyword.cover.systemverilog
                2: punctuation.accessor.dot.systemverilog
                3: variable.other.systemverilog
            - match: '(({{id}})\s*(:))?\s*(coverpoint|cross)\b'
              captures:
                2: entity.name.type.coverpoint.systemverilog
                3: keyword.operator.other.systemverilog
                4: keyword.control.systemverilog
            - match: \s*\b(endgroup)\b(\s*(:)\s*(\w+))?
              scope: meta.object.end.systemverilog
              captures:
                1: keyword.control.systemverilog
                3: keyword.operator.systemverilog
                4: entity.label.systemverilog
              pop: true

# Constraint
  constraint :
    - match: '\s*(?:(pure)\s+)?(?:(static|protected|local)\s+)?(constraint)\s+({{id}})\s*(;)'
      captures:
        1 : keyword.other.systemverilog
        2 : keyword.other.systemverilog
        3 : keyword.other.systemverilog
        4 : entity.name.section.systemverilog
        5 : punctuation.terminator.systemverilog
    - match: '\s*(?:(static)\s+)?(constraint)\s+(?:({{id}})\s*(::)\s*)?({{id}})\s*(\{)'
      captures:
        1 : keyword.other.systemverilog
        2 : keyword.other.systemverilog
        3 : storage.type.userdefined.systemverilog
        4 : keyword.operator.scope.systemverilog
        5 : entity.name.section.systemverilog
        6 : punctuation.section.block.constraint.begin.systemverilog
      push: constraint_block
    - match: '\s*\b(with)\s*(\{)'
      captures:
        1: keyword.other.systemverilog
        2: punctuation.section.block.constraint.begin.systemverilog
      push: constraint_block
  constraint_block:
        - meta_scope: meta.block.constraint.systemverilog
        - match: '\}'
          scope: punctuation.section.block.constraint.end.systemverilog
          pop: true
        - include: constraint_subblock
  constraint_subblock:
    - match: \}
      scope:  punctuation.section.block.end.systemverilog
      pop: true
    - match: \b(solve|before|soft|if|else|foreach|disable|dist|inside|unique)\b
      scope: keyword.other.systemverilog
    - match : \{
      scope:  punctuation.section.block.begin.systemverilog
      push : constraint_subblock
    - include: comments
    - include: operators
    - include: macro
    - include: constants
    - include: function-call
    - include: casting
    - include: strings
    - include: scoping

# Extern declaration
  extern-decl:
    - match: \s*\b(extern)\b
      captures:
        1: keyword.control.systemverilog
      push:
        - meta_scope: meta.declaration.extern.systemverilog
        - match: \b(static|local|protected|virtual|pure)\b
          scope: keyword.control.systemverilog
        - include: function-decl
        - include: task-decl
        - match: '\s*(module)\s+\b({{id}})\b'
          captures:
            1: keyword.control.systemverilog
            2: entity.name.type.module.systemverilog
          set: module-port
        - match: \bconstraint\b
          scope: keyword.control.systemverilog
          set :
            - match: \b{{id}}\b
              scope: entity.name.section.systemverilog
              pop: true
        - include: else-pop
    - match: ^\s*(pure)\s+(virtual)\b
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
      push:
        - meta_scope: meta.declaration.pure.systemverilog
        - include: function-decl
        - include: task-decl
  function-decl:
    - match: \bfunction\b
      scope: keyword.control.systemverilog
      set :
        - meta_scope: meta.function.prototype.systemverilog
        - match: \bautomatic\b
          scope: keyword.control.systemverilog
        - match: '\s*\b(?:({{id}})\s*(::)\s*)?(({{id}})\s+(?:(signed|unsigned)\s+)?)({{id}})\b'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            4: storage.type.systemverilog
            5: storage.modifier.systemverilog
            6: entity.name.function.systemverilog
          set: function-port
        - match: '\b(?:({{id}})\s*(::)\s*)?({{id}}\s+)?({{id}})\s*(?=\(|;)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.systemverilog
            4: entity.name.function.systemverilog
          set: function-port
        - include: type-base-novar
        - include: base-grammar
        - include: system-task
        - match: '({{id}})\s*(?=\[)'
          captures:
            1: storage.type.userdefined.systemverilog
  task-decl:
    - match: \btask\b
      scope: keyword.control.systemverilog
      set:
        - match: \bautomatic\b
          scope: keyword.control.systemverilog
        - match: '\b({{id}})\b'
          captures:
            1: entity.name.function.systemverilog
          set: task-port
# Function
  function-def:
    - match: \s*(?:(virtual)\s+)?(?:(static|local|protected)\s+)?(?:(virtual)\s+)?\s*\b(function)\b(?:\s+(automatic|static))?
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
        3: keyword.control.systemverilog
        4: keyword.control.systemverilog
        5: keyword.control.systemverilog
      push:
        - meta_scope: meta.function.systemverilog
        - match: '\s*\b(?:({{id}})\s*(::)\s*)?({{id}})\s*(?=\(|;)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: entity.name.function.systemverilog
          set: [function-body, function-port]
        - include: type-base-novar
        - include: base-grammar
        - include: system-task
        - match: \b(?:({{id}})\s*(::)\s*)?({{id}})\b\s*(?=(\[|\w))
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.userdefined.systemverilog
    - match: \s*(?:\b(import|export)\s+((")[^"]+(")\s+))?(?:(pure|context)\s+)?(?:(virtual)\s+)?(?:(static|local|protected)\s+)?(?:(virtual)\s+)?\s*\b(function)\b(?:\s+(automatic|static))?
      captures:
        1: keyword.control.systemverilog
        2: string.quoted.double.systemverilog
        3: punctuation.definition.string.begin.systemverilog
        4: punctuation.definition.string.end.systemverilog
        5: keyword.control.systemverilog
        6: keyword.control.systemverilog
        7: keyword.control.systemverilog
        8: keyword.control.systemverilog
        9: keyword.control.systemverilog
        10: keyword.control.systemverilog
      push:
        - meta_scope: meta.function.prototype.systemverilog
        - match: '\s*\b(?:({{id}})\s*(::)\s*)?({{id}}\s+)({{id}})\b'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.systemverilog
            4: entity.name.function.systemverilog
          set: function-port
        - match: '\b(?:({{id}})\s*(::)\s*)?({{id}}\s+)?({{id}})\s*(?=\(|;)'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.systemverilog
            4: entity.name.function.systemverilog
          set: function-port
        - include: type-base-novar
        - include: base-grammar
        - include: system-task
        - match: '({{id}})\s*(?=\[)'
          captures:
            1: storage.type.userdefined.systemverilog
  function-port:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      set:
        - meta_scope: meta.function.port.systemverilog
        - match: (\))\s*(;)
          captures:
            1: punctuation.section.group.end.systemverilog
            2: punctuation.terminator.systemverilog
          pop: true
        - match: const
          scope: keyword.other.const.systemverilog
        - include: port-dir
        - match: '\s*\b(?:({{id}})\s*(::)\s*)?({{id}})\s+(?:(signed|unsigned)\s+)?({{id}})'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.systemverilog
            4: storage.type.systemverilog
        - include: base-grammar
        - match: '({{id}})\s*(#)'
          captures:
            1: storage.type.userdefined.systemverilog
            2: keyword.operator.other.param.systemverilog

    - include: comments
    - include: else-pop
  function-body:
    - meta_scope: meta.function.body.systemverilog
    - match: (endfunction)(?:\s*(:)\s*(?:(\3)\b|({{id}})))?
      captures:
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: port-dir
    - include: casting
    - include: randseq
    - include: keyword-control
    - include: base-grammar
    - include: user-defined-type
    - include: function-call
    - include: struct-assign

# Task
  task-def:
    - match: ^\s*(?:(virtual)\s+)?(?:(static|local|protected)\s+)?(?:(virtual)\s+)?\s*\b(task)\b(?:\s+(automatic|static))?
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
        3: keyword.control.systemverilog
        4: keyword.control.systemverilog
        5: keyword.control.systemverilog
      push:
        - meta_scope: meta.task.systemverilog
        # Check endtask to handle badly construct task (e.g. while writing one )
        - match: \bendtask\b
          scope: keyword.other.systemverilog
          pop: true
        - match: '\b(?:({{id}})\s*(::)\s*)?({{id}})\b'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: entity.name.function.systemverilog
          set: [task-body, task-port]
        # - include: base-grammar
    - match: \s*\b(?:(extern|pure))\s+(?:(virtual)\s+)?(?:(static|local|protected)\s+)?(?:(virtual)\s+)?\s*\b(task)\b(?:\s+(automatic|static))?
      captures:
        1: keyword.control.systemverilog
        2: keyword.control.systemverilog
        3: keyword.control.systemverilog
        4: keyword.control.systemverilog
        5: keyword.control.systemverilog
        6: keyword.control.systemverilog
      push:
        - meta_scope: meta.task.prototype.systemverilog
        - match: '\b({{id}})\b'
          captures:
            1: entity.name.function.systemverilog
          set: task-port
        # - include: base-grammar
    - match: \s*(?:\b(import|export)\s+((")[^"]+(")\s+))?(?:(context)\s+)?(?:(virtual)\s+)?(?:(static|local|protected)\s+)?(?:(virtual)\s+)?\s*\b(task)\b(?:\s+(automatic|static))?
      captures:
        1: keyword.control.systemverilog
        2: string.quoted.double.systemverilog
        3: punctuation.definition.string.begin.systemverilog
        4: punctuation.definition.string.end.systemverilog
        5: keyword.control.systemverilog
        6: keyword.control.systemverilog
        7: keyword.control.systemverilog
        8: keyword.control.systemverilog
        9: keyword.control.systemverilog
        10: keyword.control.systemverilog
      push:
        - meta_scope: meta.task.prototype.systemverilog
        - match: '\b({{id}})\b'
          captures:
            1: entity.name.function.systemverilog
          set: task-port
        # - include: base-grammar
  task-port:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      set:
        - meta_scope: meta.task.port.systemverilog
        - match: (\))\s*(;)
          captures:
            1: punctuation.section.group.end.systemverilog
            2: punctuation.terminator.systemverilog
          pop: true
        - match: const
          scope: keyword.other.const.systemverilog
        - include: port-dir
        - match: '\s*\b(?:\b(virtual)\s+)?(?:({{id}})\s*(::)\s*)?({{id}})\s+(?:(signed|unsigned)\s+)?({{id}})'
          captures:
            1: keyword.other.systemverilog
            2: support.type.scope.systemverilog
            3: keyword.operator.scope.systemverilog
            4: storage.type.systemverilog
            5: storage.type.systemverilog
        - include: base-grammar
    - include: comments
    - include: else-pop
  task-body:
    - meta_scope: meta.task.body.systemverilog
    - match: \b(endtask)(?:\s*(:)\s*(?:(\3)\b|({{id}})))?
      captures:
        1: keyword.control.systemverilog
        2: keyword.operator.systemverilog
        3: entity.label.systemverilog
        4: invalid.illegal.systemverilog
      pop: true
    - include: port-dir
    - include: casting
    - include: randseq
    - include: keyword-control
    - include: base-grammar
    - include: user-defined-type
    - include: function-call
    - include: struct-assign

  func-task-port-import:
    - match: \(
      scope: punctuation.section.group.begin.systemverilog
      set:
        - meta_scope: meta.functask.port.systemverilog
        - match: \)\s*,
          scope: punctuation.section.group.end.systemverilog
          pop: true
        - match: (?=;)
          pop: true
        - include: port-dir
        - match: '\s*\b(?:({{id}})\s*(::)\s*)?({{id}})\s+(?:(signed|unsigned)\s+)?({{id}})'
          captures:
            1: support.type.scope.systemverilog
            2: keyword.operator.scope.systemverilog
            3: storage.type.systemverilog
            4: storage.type.systemverilog
        - include: base-grammar
    - include: comments
    - include: else-pop

  randseq:
    - match: \s*(randsequence)\s*\(\s*({{id}})?\s*\)
      captures:
        1: keyword.control.systemverilog
      push:
        - meta_scope: meta.randsequence.systemverilog
        - match: \b(endsequence)\b
          scope: keyword.control.systemverilog
          pop: true
        - include: keyword-control
        - match: ^\s*(?:({{id}})\s+)?({{id}})(?:\s*(:))
          captures:
            1: storage.type.systemverilog
            2: entity.name.tag.systemverilog
            3: keyword.operator.systemverilog
        - match: \brand\s+join\b
          scope: keyword.control.systemverilog
        - include: base-grammar
        - include: system-task
        - include: function-call
